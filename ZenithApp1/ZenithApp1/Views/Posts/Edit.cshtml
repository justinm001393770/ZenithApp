@using ZenithApp1.ViewModels.Posts
@using ZenithApp1.Models
@model ZenithApp1.ViewModels.Posts.PostsViewModel
@{
    ViewBag.Title = "PostsEdit";
}
<script src="https://code.jquery.com/jquery-3.0.0.min.js" type="text/javascript"></script>
<script src="~/Scripts/imagepicker.js" type="text/javascript"></script>

<div class="outer container">
    <div class="outer-header noselect">
        <div class="header-text-sm">Edit Post</div>
    </div>
</div>

    <div class="post-edit-container">
    <div class="outer container text-adv-search">
        <div class="adv-search-container">
            <section id="PostForm">
                @using (Html.BeginForm("Update", "Post", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(m => m.post.PostTitle, new { @class = "col-md-2 control-label" })
                        <div class="col-md-10">
                            @Html.TextBoxFor(m => m.post.PostTitle, new { @placeholder = "Post Title", @class = "inner text-box-1", @autocomplete = "off", required = "required" })
                            @Html.ValidationMessageFor(m => m.post.PostTitle, "", new { @class = "text-danger" })
                        </div>
                    </div>
                            <div class="form-group">
                                @Html.LabelFor(m => m.post.PostContents, new { @class = "col-md-2 control-label" })
                                <div class="col-md-10">
                                    @Html.TextAreaFor(m => m.post.PostContents, new { Value = @Model.post.PostContents, @class = "inner text-box-1", @style = "overflow:auto;resize:none", @autocomplete = "off", required = "required" })
                                    @Html.ValidationMessageFor(m => m.post.PostContents, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            @Html.HiddenFor(m => m.post.PostID, new { Value = @Model.post.PostID })
                            @Html.HiddenFor(m => m.post.PostedByID, new { Value = @Model.post.PostedByID })
                            @Html.HiddenFor(m => m.post.PostedToID, new { Value = @Model.post.PostedToID })
                            @Html.HiddenFor(m => m.post.IsActive, new { Value = @Model.post.IsActive })
                            @Html.HiddenFor(m => m.post.IsReported, new { Value = @Model.post.IsReported })


                    <div></div>
                    <div><button type="button" class="collapsible btn-zenith btn-sm other">Add Media</button></div>
                                <div class="imageselectorcontent" id="selectcontent">
                                    <div class="picker">
                                        <select multiple="multiple" class="image-picker inner show-html"
                                                name="@Html.NameFor(m => m.editPostMedias)"
                                                id="@Html.IdFor(m => m.editPostMedias)">

                                            @{List<Medium> pickerImages = Model.usersMedia;}
                                            @{long pickerCnt = 0;}
                                            @foreach (Medium m in pickerImages)
                                            {
                                                pickerCnt = pickerCnt + 1;
                                                if (m.MediaPath != null || m.MediaPath.ToString() != "")
                                                {
                                                    if (pickerCnt > 1)
                                                    {
                                                        if (Model.post.PostMedias.ToList().Exists(x => x.MediaID == m.MediaID))
                                                        {
																<option data-img-src="@(m.MediaPath)" 
																data-img-alt="@(m.MediaName)" value="@(m.MediaID)" selected>@(m.MediaName)</option>
                                                        }
                                                        else
                                                        {
																<option data-img-src="@(m.MediaPath)" 
																data-img-alt="@(m.MediaName)" value="@(m.MediaID)">@(m.MediaName)</option>
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (Model.post.PostMedias.ToList().Exists(x => x.MediaID == m.MediaID))
                                                        {
																<option data-img-src="@(m.MediaPath)" 
																data-img-class="first" data-img-alt="@(m.MediaName)" value="@(m.MediaID)" selected>@(m.MediaName)</option>
                                                        }
                                                        else
                                                        {
																<option data-img-src="@(m.MediaPath)" 
																data-img-class="first" data-img-alt="@(m.MediaName)" value="@(m.MediaID)">@(m.MediaName)</option>
                                                        }
                                                    }
                                                }
                                            }

                                        </select>
                                    </div>
                                </div>

                            <div class="form-group">
                                <div class="col-md-offset-2 col-md-10">
                                    <input type="submit" value="Edit Post" class="btn-zenith btn-sm red-other" />
                                </div>
                            </div>
                                            }
            </section>
        </div>
        </div>
        </div>
        <div class="delete-post-container">
            <section id="ReportForm">
                @using (Html.BeginForm("Delete", "Post", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.HiddenFor(m => m.post.PostID, new { Value = @Model.post.PostID })
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Delete" class="btn-zenith btn-sm red" />
                        </div>
                    </div>
                }
            </section>
        </div>
        <script type="text/javascript">

            jQuery("select.image-picker").imagepicker({
                hide_select: false,
            });

            jQuery("select.image-picker.show-labels").imagepicker({
                hide_select: false,
                show_label: false,
            });

            jQuery("select.image-picker.limit_callback").imagepicker({
                limit_reached: function () { alert('We are full!') },
                hide_select: false
            });

            var container = jQuery("select.image-picker.masonry").next("ul.thumbnails");
            container.imagesLoaded(function () {
                container.masonry({
                    itemSelector: "li",
                });
            });

        </script>

     <script>
			var coll = document.getElementsByClassName("collapsible");
			var i;

			for (i = 0; i < coll.length; i++) {
			  coll[i].addEventListener("click", function() {
				this.classList.toggle("active-add-media");
				var content = document.getElementById("selectcontent")
				if (content.style.display === "grid") {
				  content.style.display = "none";
				} else {
				  content.style.display = "grid";
				}
			  });
			}
</script>
